{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"User Documentation","text":"<p>Welcome to the user documentation for aretext!</p> <p>Aretext is a terminal-based text editor with vim-compatible key bindings.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Install</li> <li>Quickstart</li> </ul>"},{"location":"#user-guide","title":"User Guide","text":"<ul> <li>Files: how to find, open, and save documents.</li> <li>Navigation: how to navigate within a document.</li> <li>Edit: how to edit a document.</li> <li>Configuration: how to configure settings.</li> <li>Custom Menu Commands: how to extend the editor with custom menu commands.</li> </ul>"},{"location":"#reference","title":"Reference","text":"<ul> <li>Command Reference</li> <li>Configuration Reference</li> <li>Cheat Sheet</li> </ul>"},{"location":"#contact","title":"Contact","text":"<ul> <li>GitHub Discussions for questions.</li> <li>GitHub Issues for bug reports and feature requests.</li> </ul>"},{"location":"command-reference/","title":"Command Reference","text":"<p>This document lists every command in aretext.</p> <p>All commands are compatible with vim keybindings, but not all vim keybindings are implemented. If you want to use a command that is not yet available, please consider contributing to the project!</p>"},{"location":"command-reference/#normal-mode-commands","title":"Normal Mode Commands","text":"<p>Some commands may be prefixed with a number count to repeat the command count times. For example \"5x\" deletes the next five characters.</p> <p>Commands that interact with the clipboard accept a clipboard page prefix of the form <code>\"[a-z]</code>, where the letter is the name of the page. If not provided, a default (unnamed) page is used.</p> Name Key Binding Options cursor left left arrow count cursor right right arrow count cursor up up arrow count cursor down down arrow count cursor left h count cursor right l count cursor up k count cursor down j count cursor forward space count cursor back backspace count cursor start of next line after indentation enter cursor to next matching character in line f{char} count cursor to prev matching character in line F{char} count cursor till next matching character in line t{char} count cursor till prev matching character in line T{char} count cursor next word start w count cursor next word start, including punctuation W count cursor prev word start b count cursor prev word start, including punctuation B count cursor next word end e count cursor next word end, including punctuation E count cursor prev paragraph { cursor next paragraph } cursor line start 0 cursor line start after indentation ^ cursor line end $ cursor start of first line gg cursor start of line number {count}gg cursor start of last line G cursor matching code block delimiter (paren, brace, or bracket) % cursor prev unmatched open brace [{ cursor next unmatched close brace ]} cursor prev unmatched open paren [( cursor next unmatched close paren ]) scroll up (full page) ctrl-f scroll down (full page) ctrl-b scroll up (half page) ctrl-u scroll down (half page) ctrl-d insert i insert at start of line I append a append at end of line A new line below o new line above O join lines J delete next character in line x count, clipboard page delete next character in line delete delete line dd count, clipboard page delete previous character in line dh clipboard page delete lines below dj clipboard page delete lines above dk clipboard page delete next character in line dl count, clipboard page delete to end of line d$ clipboard page delete to start of line d0 clipboard page delete to start of line after indentation d^ clipboard page delete to end of line D clipboard page delete to start of next word dw count, clipboard page delete to start of next word, including punctuation dW count, clipboard page delete a word daw count, clipboard page delete inner word diw count, clipboard page delete a double-quoted string da\" clipboard page delete inner double-quoted string di\" clipboard page delete a single-quoted string da' clipboard page delete inner single-quoted string di' clipboard page delete a backtick-quoted string da` clipboard page delete inner backtick-quoted string di` clipboard page delete to next matching character in line df{char} count, clipboard page delete to prev matching character in line dF{char} count, clipboard page delete till next matching character in line dt{char} count, clipboard page delete till prev matching character in line dT{char} count, clipboard page delete inner paren block dib  di(  di) clipboard page delete a paren block dab  da(  da) clipboard page delete inner brace block diB  di{  di} clipboard page delete a brace block daB  da{  da} clipboard page delete inner angle block di&lt;  di&gt; clipboard page delete an angle block da&lt;  da&gt; clipboard page search forward and delete d/ clipboard page search backward and delete d? clipboard page change word cw count, clipboard page change a word caw count, clipboard page change inner word ciw count, clipboard page change a double-quoted string ca\" clipboard page change inner double-quoted string ci\" clipboard page change a single-quoted string ca' clipboard page change inner single-quoted string ci' clipboard page change a backtick-quoted string ca` clipboard page change inner backtick-quoted string ci` clipboard page change to next matching character in line cf{char} count, clipboard page change to prev matching character in line cF{char} count, clipboard page change till next matching character in line ct{char} count, clipboard page change till prev matching character in line cT{char} count, clipboard page change inner paren block cib  ci(  ci) clipboard page change a paren block cab  ca(  ca) clipboard page change inner brace block ciB  ci{  ci} clipboard page change a brace block caB  ca{  ca} clipboard page change inner angle block ci&lt;  ci&gt; clipboard page change an angle block ca&lt;  ca&gt; clipboard page search forward and change c/ clipboard page search backward and change c? clipboard page replace character r toggle case ~ indent line &gt;&gt; outdent line &lt;&lt; yank to start of next word yw count, clipboard page yank to start of next word, including punctuation yW count, clipboard page yank a word yaw count, clipboard page yank inner word yiw count, clipboard page yank a double-quoted string ya\" clipboard page yank inner double-quoted string yi\" clipboard page yank a single-quoted string ya' clipboard page yank inner single-quoted string yi' clipboard page yank a backtick-quoted string ya` clipboard page yank inner backtick-quoted string yi` clipboard page yank line yy clipboard page yank to next matching character in line yf{char} count, clipboard page yank to prev matching character in line yF{char} count, clipboard page yank till next matching character in line yt{char} count, clipboard page yank till prev matching character in line yT{char} count, clipboard page search forward and yank y/ clipboard page search backward and yank y? clipboard page put after cursor p clipboard page put before cursor P clipboard page show command menu : start forward search / start backward search ? find next match n find previous match N search forward for word under cursor * count search backward for word under cursor # count undo u redo ctrl-r visual mode charwise v visual mode linewise V repeat last action ."},{"location":"command-reference/#visual-mode-commands","title":"Visual Mode Commands","text":"Name Key Binding Options toggle visual mode charwise v toggle visual mode linewise V return to normal mode escape show command menu : delete selection x clipboard page delete selection d clipboard page delete selection delete change selection c clipboard page toggle case for selection ~ indent selection &gt; outdent selection &lt; yank selection y clipboard page select inner word iw count select a word aw count select a double-quoted string a\" select inner double-quoted string i\" select a single-quoted string a' select inner single-quoted string i' select a backtick-quoted string a` select inner backtick-quoted string i` select inner paren block ib  i(  i) select a paren block ab  a(  a) select inner brace block iB  i{  i} select a brace block aB  a{  a} select inner angle block i&lt;  i&gt; select an angle block a&lt;  a&gt;"},{"location":"command-reference/#menu-commands","title":"Menu Commands","text":"Name Aliases quit q force quit q! new document move or rename document save document s, w save document and quit sq, wq, x force save document s!, w! force save document and quit sq!, wq! force reload r! find and open f open previous document p open next document n child directory cd parent directory pd toggle show tabs ta toggle tab expand te toggle line numbers nu toggle auto-indent ai start/stop recording macro m replay macro r"},{"location":"config-reference/","title":"Configuration Reference","text":"<p>This document lists every configuration option in aretext.</p> Attribute Type Description syntaxLanguage enum Language used for syntax highlighting. Must be a valid syntax language. tabSize integer Maximum number of cells occupied by a tab. Must be greater than zero. tabExpand boolean If true, replace inserted tabs with the equivalent number of spaces. showTabs boolean If true, display tabs in the document. showSpaces boolean If true, display spaces in the document. autoIndent boolean If true, indent new lines to match indentation of the previous line. showLineNumbers boolean If true, display line numbers. lineNumberMode enum Control how line numbers are displayed. Either \"absolute\" or \"relative\" to the cursor. lineWrap enum Control soft line wrapping behavior. Either \"character\" for breaking at any character boundary or \"word\" to break only at word boundaries. menuCommands array of objects Additional menu items that can run arbitrary shell commands. See Menu Command Object below for the expected fields. hidePatterns array of strings Glob patterns matching files or directories to hide from file search. Patterns are matched against absolute paths. hideDirectories array of strings (DEPRECATED, use hidePatterns instead) Glob patterns matching directories to hide from file search. Patterns are matched against the absolute path to the directory. styles dict Styles control how UI elements are displayed. See Styles below for details."},{"location":"config-reference/#syntax-languages","title":"Syntax Languages","text":"Value Description bash bash c C criticmarkup CriticMarkup gitcommit Format for editing a git commit gitrebase Format for git interactive rebase go Go gotemplate Go template json JSON makefile Makefile markdown Markdown p4 p4 plaintext Do not apply any syntax highlighting. protobuf Protocol Buffers Version 3 python Python rust Rust todotxt todo.txt xml xml yaml YAML"},{"location":"config-reference/#menu-command-object","title":"Menu Command Object","text":"Attribute Type Description name string Displayed name of the menu item. shellCmd string Shell command to execute when the menu item is selected. mode enum Either \"silent\", \"terminal\", \"insert\", or \"fileLocations\". See Custom Menu Commands for more details. save bool If true, attempt to save the document before executing the command."},{"location":"config-reference/#styles","title":"Styles","text":"<p>The <code>styles</code> configuration is an object with keys:</p> <ul> <li><code>lineNum</code>: the line numbers displayed in the left margin of the document.</li> <li><code>tokenOperator</code>: an operator token recognized by the syntax language.</li> <li><code>tokenKeyword</code>: a keyword token recognized by the syntax language.</li> <li><code>tokenNumber</code>: a number token recognized by the syntax language.</li> <li><code>tokenString</code>: a string token recognized by the syntax language.</li> <li><code>tokenComment</code>: a comment token recognized by the syntax language.</li> <li><code>tokenCustom1</code> through <code>tokenCustom16</code>: language-specific tokens recognized by the syntax language.</li> </ul> <p>Each style object supports the following (optional) attributes:</p> Attribute Type Description color string Foreground (text) color. backgroundColor string Background color. bold bool Set bold attribute. italic bool Set italic attribute. underline bool Set underline attribute. strikethrough bool Set strikethrough attribute. <p>Colors can be either a W3C color keyword or a hexadecimal RGB code. For example, both <code>red</code> and <code>#ff0000</code> represent the color red.</p> <p>When using named colors, the terminal emulator may override the displayed color. For example, the solarized dark theme in Alacritty overrides the color <code>red</code> to a specific hex code. If you want to ignore the terminal emulator palette, specify colors using hexadecimal RGB codes instead of named colors.</p> <p>Not all terminal emulators support every style attribute (bold, italic, etc.). If styles are displayed incorrectly, try changing the value of the <code>$TERM</code> environment variable. If you are using tmux, try <code>set -g default-terminal \"tmux\"</code>.</p>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#editing-config","title":"Editing Config","text":"<p>Aretext stores its configuration in a single YAML file. You can edit the config file using the <code>editconfig</code> flag:</p> <pre><code>aretext -editconfig\n</code></pre> <p>The configuration file is located at <code>$XDG_CONFIG_HOME/aretext/config.yaml</code>, where <code>XDG_CONFIG_HOME</code> is configured according to the XDG Base Directory Specification. On Linux, this defaults to <code>~/.config</code>, and on macOS it defaults to <code>~/Library/Application Support</code>.</p> <p>When you open the config file, you should see something like:</p> <pre><code>- name: default\n  pattern: \"**\"\n  config:\n    autoIndent: false\n    hidePatterns: [\"**/.git\"]\n    syntaxLanguage: plaintext\n    tabExpand: false\n    tabSize: 4\n    showLineNumbers: false\n\n- name: json\n  pattern: \"**/*.json\"\n  config:\n    autoIndent: true\n    syntaxLanguage: json\n    tabExpand: true\n    tabSize: 2\n    showLineNumbers: true\n</code></pre> <p>Each item in the configuration file describes a rule. For example, in the snippet above, the first rule is named \"default\" and the second rule is named \"json\".</p> <p>Each rule has a pattern. The \"**\" is a wildcard that matches any subdirectory, and \"*\" is a wildcard that matches zero or more characters in a file or directory name.</p> <p>When aretext loads a file, it checks each rule in order. If the rule's pattern matches the file's absolute path, it applies the rule to update the configuration.</p> <p>For example, if aretext loaded the file \"foo/bar.json\" using the above configuration, both rules would match the filename. The resulting configuration would be:</p> <pre><code>config:\n  autoIndent: true           # from the \"json\" rule\n  hidePatterns: [\"**/.git\"]  # from the \"default\" rule\n  syntaxLanguage: json       # from the \"json\" rule\n  tabExpand: true            # from the \"json\" rule\n  tabSize: 2                 # from the \"json\" rule\n  showLineNumbers: true      # from the \"json\" rule\n</code></pre> <p>When merging configurations from different rules:</p> <ul> <li>For strings and numbers, the values from later rules overwrite the values from previous rules.</li> <li>For lists, the values from all rules are combined.</li> <li>For dictionaries, the keys from later rules are added to the merged dictionary, potentially overwriting keys set by previous rules.</li> </ul> <p>This is a powerful mechanism for customizing configuration based on filename extension and/or project location. For example, suppose that the style guidelines for a project mandate four spaces of indentation for JSON. You could add a new rule to your config that overwrites the tabSize for JSON files in that specific project:</p> <pre><code># ... other rules above ...\n- name: myproject json\n  pattern: \"**/myproject/**/*.json\"\n  config:\n    tabSize: 4\n</code></pre>"},{"location":"configuration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"configuration/#fixing-errors-on-startup","title":"Fixing errors on startup","text":"<p>If your YAML config file has errors, aretext will exit with an error message. You can force aretext to ignore the config file by passing the \"-noconfig\" flag:</p> <pre><code>aretext -editconfig -noconfig\n</code></pre> <p>This allows you to start the editor so you can fix the configuration.</p>"},{"location":"configuration/#checking-which-rules-were-applied","title":"Checking which rules were applied","text":"<p>To see which configuration rules aretext applied when loading a file, start aretext with logging enabled:</p> <pre><code>aretext -log debug.log\n</code></pre> <p>If you view the file <code>debug.log</code>, you should see lines like this:</p> <pre><code>Applying config rule 'default' with pattern '**' for path 'path/to/file.txt'\n</code></pre> <p>This tells you which rules aretext applied when opening a file, which can help you debug your configuration.</p>"},{"location":"configuration/#configuration-reference","title":"Configuration Reference","text":"<p>For a complete list of available configuration options, see Configuration Reference.</p>"},{"location":"custom-menu-commands/","title":"Custom Menu Commands","text":"<p>Aretext allows you to define custom menu items to run shell commands. This provides a simple, yet powerful, way to extend the editor.</p>"},{"location":"custom-menu-commands/#adding-custom-menu-comands","title":"Adding Custom Menu Comands","text":"<p>You can add new menu commands by editing the config file to add this rule:</p> <pre><code>- name: custom menu rule\n  pattern: \"**/myproject/**\"\n  config:\n    menuCommands:\n    - name: my custom menu command\n      shellCmd: echo 'hello world!' | less\n      mode: terminal  # or \"silent\" or \"insert\" or \"fileLocations\"\n</code></pre> <p>After restarting the editor, the new command will be available in the command menu. Selecting the new command will launch a shell to execute the given command (in this case, echoing \"hello world\").</p> <p>The shell program can be configured by environment variables: <code>$ARETEXT_SHELL</code> has highest priority, then <code>$SHELL</code>. If neither environment variable is set, aretext uses <code>sh</code>.</p> <p>The \"mode\" parameter controls how aretext handles the command's input and output. The table below shows the available modes:</p> Mode Input Output Use Cases terminal tty tty <code>make</code>, <code>git commit</code>, <code>go test</code>, <code>man</code>, ... silent none none <code>go fmt</code>, tmux commands, copy to system clipboard, ... insert none insert into document paste from system clipboard, insert snippet, comment/uncomment selection, ... insertChoice none insert choice menu choose a word to insert from a dictionary like <code>/usr/share/dict/words</code>, ... fileLocations none file location menu grep for word under cursor, ... workingDir none working directory menu select the current working directory from a preset list <p>In addition, the following environment variables are provided to the shell command:</p> <ul> <li><code>$FILEPATH</code> is the absolute path to the current file.</li> <li><code>$WORD</code> is the current word under the cursor.</li> <li><code>$LINE</code> is the line number of the cursor, starting from one.</li> <li><code>$COLUMN</code> is the column position of the cursor in bytes, starting from one.</li> <li><code>$SELECTION</code> is the currently selected text (if any).</li> </ul> <p>If there are multiple commands with the same name, only the last of these commands will appear in the menu.</p>"},{"location":"custom-menu-commands/#examples","title":"Examples","text":""},{"location":"custom-menu-commands/#build-a-project-with-make","title":"Build a project with make","text":"<p>Add a menu command to build a project using <code>make</code>. Piping to <code>less</code> allows us to page through the output.</p> <pre><code>- name: custom make cmd\n  pattern: \"**/myproject/**\"\n  config:\n    menuCommands:\n    - name: build\n      shellCmd: make | less\n      save: true  # save the file before running `make`\n</code></pre>"},{"location":"custom-menu-commands/#copy-and-paste-using-the-system-clipboard","title":"Copy and paste using the system clipboard","text":"<p>Most systems provide command-line utilities for interacting with the system clipboard. Custom menu commands can invoke these tools to copy the current selection and paste into the document.</p> <p>On Linux (Wayland):</p> <pre><code>- name: linux wayland clipboard commands\n  pattern: \"**\"\n  config:\n    menuCommands:\n    - name: copy to clipboard\n      shellCmd: wl-copy \"$SELECTION\"\n      mode: silent\n    - name: paste from clipboard\n      shellCmd: wl-paste\n      mode: insert\n</code></pre> <p>On macOS:</p> <pre><code>- name: macos clipboard commands\n  pattern: \"**\"\n  config:\n    menuCommands:\n      - name: copy to clipboard\n        shellCmd: printenv SELECTION | pbcopy\n        mode: silent\n      - name: paste from clipboard\n        shellCmd: pbpaste\n        mode: insert\n</code></pre> <p>Using tmux:</p> <pre><code>- name: tmux clipboard commands\n  pattern: \"**\"\n  config:\n    menuCommands:\n    - name: copy to clipboard\n      shellCmd: printenv SELECTION | tmux load-buffer -\n      mode: silent\n    - name: paste from clipboard\n      shellCmd: tmux show-buffer\n      mode: insert\n</code></pre>"},{"location":"custom-menu-commands/#format-the-current-file","title":"Format the current file","text":"<p>Many programming languages provide command line tools to automatically format code. You can add a custom menu command to run these tools on the current file.</p> <p>For example, this command uses <code>go fmt</code> to format a Go file:</p> <pre><code>- name: custom fmt command\n  pattern: \"**/*.go\"\n  config:\n    menuCommands:\n    - name: go fmt current file\n      shellCmd: go fmt $FILEPATH | less\n      save: true  # save the file before running `go fmt`\n</code></pre>"},{"location":"custom-menu-commands/#git-blame-the-current-file","title":"Git blame the current file","text":"<p>When working in a git repository, you might want to know who last edited a line of code. You can find this using <code>git blame</code> on the current file.</p> <pre><code>- name: git blame command\n  pattern: \"**\"\n  config:\n    menuCommands:\n    - name: git blame\n      shellCmd: git blame \"$FILEPATH\" | less +$LINE\n</code></pre>"},{"location":"custom-menu-commands/#insert-a-snippet","title":"Insert a snippet","text":"<p>You can add a custom menu command to insert a snippet of code.</p> <p>For example, suppose you have written a template for a Go test. You can then create a menu command to <code>cat</code> the contents of the file into the document:</p> <pre><code>- name: custom snippet command\n  pattern: \"**/*.go\"\n  config:\n    menuCommands:\n    - name: insert test snippet\n      shellCmd: cat ~/snippets/go-test.go\n      mode: insert\n</code></pre>"},{"location":"custom-menu-commands/#grep-for-the-word-under-the-cursor","title":"Grep for the word under the cursor","text":"<p>You can add a custom menu command to grep for the word under the cursor. The following example uses ripgrep to perform the search:</p> <pre><code>- name: custom grep command\n  pattern: \"**\"\n  config:\n    menuCommands:\n    - name: rg word\n      shellCmd: rg $WORD --vimgrep  # or `grep $WORD -n -R .`\n      mode: fileLocations\n</code></pre> <p>Once the search has completed, aretext loads the locations into a searchable menu. This allows you to easily navigate to a particular result.</p> <p>The \"fileLocations\" mode works with any command that outputs file locations as lines with the format: <code>&lt;file&gt;:&lt;line&gt;:&lt;snippet&gt;</code> or <code>&lt;file&gt;:&lt;line&gt;:&lt;col&gt;:&lt;snippet&gt;</code>. You can use grep, ripgrep, or a script you write yourself!</p>"},{"location":"custom-menu-commands/#open-a-document-in-a-new-tmux-window","title":"Open a document in a new tmux window","text":"<p>If you use tmux, you can add a custom menu command to open the current document in a new window.</p> <pre><code>- name: tmux window commands\n  pattern: \"**\"\n  config:\n    menuCommands:\n    - name: split window horizontal\n      shellCmd: tmux split-window -h \"aretext -line $LINE '$FILEPATH'\"\n      mode: silent\n    - name: split window vertical\n      shellCmd: tmux split-window -v \"aretext -line $LINE '$FILEPATH'\"\n      mode: silent\n</code></pre>"},{"location":"edit/","title":"Edit","text":"<p>This guide describes commands you can use to edit a document efficiently using vim key bindings. It assumes you are familiar with the commands described in the Quickstart.</p>"},{"location":"edit/#insert-and-append","title":"Insert and append","text":"<p>In normal mode, type \"i\" to enter insert mode at the current cursor position. To insert at the position after the cursor, type \"a\" (short for \"append\") instead.</p> <p>To insert at the start of the line, type \"I\". To append after the end of the line, type \"A\".</p> <p>From insert mode, you can return to normal mode by pressing the escape key.</p>"},{"location":"edit/#delete","title":"Delete","text":"<p>To delete a single character in normal mode, type \"x\". (In insert mode, you can use the backspace key instead.)</p> <p>To delete a line, type \"dd\" in normal mode. To delete from the cursor to the end of the line, type \"D\".</p> <p>There are many delete commands of the form \"d\", where  is one of the cursor movement commands described in Navigation: <ul> <li>\"d$\" deletes from the cursor to the end of the line, because \"$\" means \"move the cursor to the end of the line\".</li> <li>\"diw\" (which means \"delete inner word\") deletes the current word under the cursor.</li> <li>\"daw\" (which means \"delete a word\") deletes the current word under the cursor and any trailing whitespace.</li> <li>\"dh\" deletes one character to the left, and \"dl\" deletes one character to the right.</li> <li>\"dj\" deletes the current and previous lines, and \"dk\" deletes the current and next line.</li> <li>\"dt{char}\" deletes up to, but not including, the next matching character on the current line.</li> </ul>"},{"location":"edit/#replace","title":"Replace","text":"<p>To replace the character under the cursor, type \"r\" in normal mode, then type the new character.</p>"},{"location":"edit/#change","title":"Change","text":"<p>In aretext, \"change\" means to delete some text then enter insert mode. This is useful for quickly changing a word or line.</p> <p>To change the current word under the cursor in normal mode, type \"ciw\" (\"change inner word\").</p> <p>To change the current word under the cursor and trailing whitespace in normal mode, type \"caw\" (\"change a word\").</p>"},{"location":"edit/#put-and-yank","title":"Put and yank","text":"<p>When you delete text, aretext copies it to a hidden buffer. You can then insert the deleted text after the cursor by typing \"p\" (short for \"put\") in normal mode. Alternatively, you can type \"P\" to insert the text before the cursor.</p> <p>You can copy a line into the buffer by typing \"yy\" (short for \"yank\") in normal mode.</p> <p>If you want to copy/paste using your system's clipboard, you will need to add custom menu commands (see Custom Menu Commands for instructions).</p>"},{"location":"edit/#inserting-and-joining-lines","title":"Inserting and joining lines","text":"<p>To start a new line below the cursor and enter insert mode, type \"o\".</p> <p>To start a new line above the cursor and enter insert mode, type \"O\".</p> <p>To join the current line with the line below, type \"J\".</p>"},{"location":"edit/#indenting-and-outdenting","title":"Indenting and outdenting","text":"<p>To indent the current line, type \"&gt;&gt;\".</p> <p>To outdent the current line, type \"\\&lt;&lt;\".</p>"},{"location":"edit/#toggle-case","title":"Toggle case","text":"<p>To change the character under the cursor from uppercase to lowercase, or vice versa, type \"~\".</p>"},{"location":"edit/#selection-visual-mode","title":"Selection (visual mode)","text":"<p>To start a selection, type \"v\" (short for \"visual mode\"). You can use the same cursor motions as in normal mode to move the end of the selection.</p> <p>To select entire lines (instead of individual characters), type \"V\".</p> <p>You can use the following commands to modify the selected text:</p> <ul> <li>\"x\" and \"d\" both delete the selection.</li> <li>\"c\" (short for \"change\") deletes the selection and enters insert mode.</li> <li>\"~\" toggles the case of the selection.</li> <li>\"&gt;\" indents the selection.</li> <li>\"&lt;\" outdents the selection.</li> <li>\"y\" (short for \"yank\") copies the selection.</li> </ul> <p>To clear the selection and return to normal mode, press the escape key.</p>"},{"location":"edit/#undo-and-redo","title":"Undo and redo","text":"<p>To undo the last edit, type \"u\" (short for \"undo\") in normal mode.</p> <p>To redo the last edit, press Ctrl-r (short for \"redo\") in normal mode.</p> <p>Aretext clears the undo history whenever a document is loaded or reloaded.</p>"},{"location":"edit/#repeat-last-action","title":"Repeat last action","text":"<p>To repeat the last action, type \".\" in normal mode. This is useful for avoiding repetitive typing.</p>"},{"location":"edit/#record-and-replay-a-macro","title":"Record and replay a macro","text":"<p>To repeat a sequence of commands, you can record a macro.</p> <ol> <li>In normal mode, type \":\" to open the command menu.</li> <li>Search for and select \"start/stop recording macro\" to begin recording a macro.</li> <li>Edit the document. Any changes you make will be recorded in the macro.</li> <li>In the command menu, select \"start/stop recording macro\" again to stop recording the macro.</li> </ol> <p>To replay the recorded macro, select \"replay macro\" in the command menu.</p> <p>Once you have replayed a macro, you can repeat it using the \".\" (repeat last action) command in normal mode.</p>"},{"location":"files/","title":"Files","text":"<p>Aretext is designed to integrate seamlessly with a terminal-based workflow. This strongly influences how aretext manages files:</p> <ul> <li> <p>It delegates window management to your terminal multiplexer or emulator. Each instance of aretext opens a single document at a time; to edit multiple documents simultaneously, you can use tmux to run multiple instances of aretext in the same terminal.</p> </li> <li> <p>It provides no commands within the editor to move, rename, create files, or change the working directory. You can use your shell (outside the editor) for these functions.</p> </li> <li> <p>It automatically reloads files that change on disk (unless there are unsaved changes). For example, if you run a code formatting tool that changes a file, aretext will automatically reload it.</p> </li> </ul> <p>Aretext currently supports only UTF-8 encoded documents with Unix-style (LF) line endings.</p>"},{"location":"files/#fuzzy-file-search","title":"Fuzzy file search","text":"<p>Aretext has built-in fuzzy search for files. This allows you to quickly find and open a file without leaving the editor:</p> <ol> <li>In normal mode, type \":\" to open the command menu.</li> <li>In the menu search bar, type \"f\" to select the \"find and open\" command, then press enter. (If there are unsaved changes in the current document, you will need to either save them first or force-reload to discard the changes.)</li> <li>Type in the search bar to filter the file paths. Use arrow keys or tab to choose a file path to open.</li> <li>Press enter to open the selected file.</li> </ol> <p>Aretext always searches within the current working directory.</p>"},{"location":"files/#opening-a-file-from-the-command-line","title":"Opening a file from the command line","text":"<p>To have aretext open a document immediately, pass the path as a positional argument like this: <code>aretext path/to/file</code>.</p> <p>If you do not provide a path argument, aretext will start an empty document called something like \"untitled-1621625423.txt\" (the number is a Unix timestamp). You can either insert text and save this document (useful for writing quick notes) or use fuzzy file search to open another document.</p>"},{"location":"files/#previous-and-next-document","title":"Previous and next document","text":"<p>Aretext remembers which documents you have opened in the editor. To return to the previous document:</p> <ol> <li>In normal mode, type \":\" to open the command menu.</li> <li>In the menu search bar, type \"p\" then select \"open previous document\".</li> </ol> <p>Once you have opened a previous document, you can return to next document using the \"open next document\" menu command.</p>"},{"location":"files/#unsaved-changes","title":"Unsaved changes","text":"<p>Aretext will warn you if a command would discard unsaved changes or overwrite changes made by another program to the file on disk. You must then decide to either force-save, force-reload, or force-quit.</p> <ul> <li>To force-save, select the \"force save document\" menu command. This will overwrite the changes on disk.</li> <li>To force-reload, select the \"force reload\" menu command. This will discard unsaved changes and reload the document from disk.</li> <li>To force-quit, select the \"force quit\" menu command. This will discard unsaved changes and exit the program.</li> </ul>"},{"location":"files/#change-the-working-directory","title":"Change the working directory","text":"<p>You can change the current working directory from within the editor using two menu commands:</p> <ul> <li>The \"child directory\" menu command changes to a sub-directory of the current working directory.</li> <li>The \"parent directory\" menu command changes to a parent directory of the current working directory.</li> </ul> <p>Each of these commands opens a searchable menu of directory paths. Once you select a path, the editor will change the current working directory.</p> <p>Note that if you start aretext from a shell like bash or zsh, these commands will not change the working directory of the shell.</p>"},{"location":"files/#using-grep-to-search-files","title":"Using grep to search files","text":"<p>To search for a term in multiple files, you can create a custom menu command that calls <code>grep</code>. See Custom Menu Commands for instructions.</p>"},{"location":"install/","title":"Install","text":""},{"location":"install/#supported-platforms","title":"Supported Platforms","text":"<ul> <li>Linux</li> <li>macOS</li> <li>FreeBSD</li> </ul>"},{"location":"install/#official-binaries","title":"Official Binaries","text":"<p>You can download the official binaries for Linux, macOS, and FreeBSD from the aretext releases page.</p>"},{"location":"install/#linux-x86-64-bit","title":"Linux x86 64-bit","text":"<pre><code>VERSION=1.4.0\nRELEASE=aretext_${VERSION}_linux_amd64\ncurl -LO https://github.com/aretext/aretext/releases/download/v$VERSION/$RELEASE.tar.gz\ntar -zxvf $RELEASE.tar.gz\nsudo cp $RELEASE/aretext /usr/local/bin/\n</code></pre>"},{"location":"install/#linux-arm-64-bit","title":"Linux ARM 64-bit","text":"<pre><code>VERSION=1.4.0\nRELEASE=aretext_${VERSION}_linux_arm64\ncurl -LO https://github.com/aretext/aretext/releases/download/v$VERSION/$RELEASE.tar.gz\ntar -zxvf $RELEASE.tar.gz\nsudo cp $RELEASE/aretext /usr/local/bin/\n</code></pre>"},{"location":"install/#macos-x86-64-bit","title":"macOS x86 64-bit","text":"<pre><code>VERSION=1.4.0\nRELEASE=aretext_${VERSION}_darwin_amd64\ncurl -LO https://github.com/aretext/aretext/releases/download/v$VERSION/$RELEASE.tar.gz\ntar -zxvf $RELEASE.tar.gz\nsudo cp $RELEASE/aretext /usr/local/bin/\n</code></pre>"},{"location":"install/#macos-arm-64-bit","title":"macOS ARM 64-bit","text":"<pre><code>VERSION=1.4.0\nRELEASE=aretext_${VERSION}_darwin_arm64\ncurl -LO https://github.com/aretext/aretext/releases/download/v$VERSION/$RELEASE.tar.gz\ntar -zxvf $RELEASE.tar.gz\nsudo cp $RELEASE/aretext /usr/local/bin/\n</code></pre>"},{"location":"install/#build-from-source","title":"Build From Source","text":"<p>If you have installed go, then you can build aretext from source:</p> <pre><code>mkdir -p $(go env GOPATH)/bin\ngit clone https://github.com/aretext/aretext.git\ncd aretext\nmake install\n</code></pre> <p>This will install aretext in <code>$(go env GOPATH)/bin</code>, which you can add to your <code>$PATH</code> environment variable. If you use bash, put this line in your <code>~/.bashrc</code> or <code>~/.bash_profile</code>:</p> <pre><code>export PATH=$PATH:$(go env GOPATH)/bin\n</code></pre>"},{"location":"install/#packages","title":"Packages","text":"<p>If a package is not yet available for your platform, please consider creating one! We are looking for package maintainers on Debian, Fedora, Homebrew, Nix, and any other platform you may prefer!</p>"},{"location":"install/#arch-linux","title":"Arch Linux","text":"<p>aretext is available as an AUR Package. If you use yay, run this to install it:</p> <pre><code>yay -S aretext\n</code></pre>"},{"location":"navigation/","title":"Navigation","text":"<p>This guide explains how to navigate efficiently within a document. It assumes you know how to start the editor and switch between normal/insert mode (if not, please read the Quickstart first).</p>"},{"location":"navigation/#scrolling","title":"Scrolling","text":"<p>To scroll up by half a screen, press Ctrl-u (\"up\") in normal mode.</p> <p>To scroll down by half a screen, press Ctrl-d (\"down\") in normal mode.</p>"},{"location":"navigation/#line-movement","title":"Line movement","text":"<p>To move the cursor to the last line, type \"G\" in normal mode.</p> <p>To move the cursor to the first line, type \"gg\" in normal mode.</p> <p>To move the cursor to a specific line number, type \"gg\" in normal mode. For example, \"123gg\" moves the cursor to the start of line 123. <p>To move the cursor to the start of the current line (after any indentation), use \"^\". Use \"0\" to move to the start of the current line before any indentation.</p> <p>To move the cursor to the end of the current line, type \"$\" in normal mode.</p>"},{"location":"navigation/#next-or-previous-matching-character","title":"Next or previous matching character","text":"<p>To move the cursor forward to the next matching character on a line, type \"f{char}\" in normal mode, where \"{char}\" is the character to match. To move the cursor up to, but not on, that character use \"t{char}\".</p> <p>Similarly, to move the cursor backwards to a matching char, use \"F{char}\" and \"T{char}\".</p>"},{"location":"navigation/#word-movement","title":"Word movement","text":"<p>A \"word\" in aretext is a sequence of characters separated by whitespace or punctuation. To move the cursor forward to the next word, press \"w\" in normal mode. Use \"e\" to move the cursor to the end of the current word, and \"b\" to move the cursor back to the start of the previous word.</p>"},{"location":"navigation/#paragraph-movement","title":"Paragraph movement","text":"<p>A \"paragraph\" in aretext is a contiguous sequence of non-empty lines. To move the cursor to the next paragraph, type \"}\" in normal mode; to move to the previous paragraph, type \"{\".</p>"},{"location":"navigation/#text-search","title":"Text search","text":"<p>Aretext supports forward and backward text search within a document.</p> <p>To search forward, type \"/\" in normal mode, then type your search query. To move the cursor to the search result, press enter; to abort the search, press escape.</p> <p>To search backward, type \"?\" in normal mode, then type your search query.</p> <p>To repeat a search, type \"n\" in normal mode (this moves the cursor to the \"next\" result). To move the cursor back to the previous result, type \"N\" in normal mode.</p> <p>If the search contains at least one uppercase letter, then it is case-sensitive; otherwise, it is case-insensitive (this is equivalent to vim's \"smartcase\" mode). You can override this by adding a suffix \"\\c\" to force case-insensitive search and \"\\C\" to force case-sensitive search. For example:</p> case-insensitive case-sensitive \"abc\" \"Abc\" \"Abc\\c\" \"abc\\C\" <p>To search for the word under the cursor, use \"*\" to search forward and \"#\" to search backwards. Word searches are always case-sensitive.</p>"},{"location":"navigation/#matching-braces-and-parentheses","title":"Matching braces and parentheses","text":"<p>Many programming languages use curly braces <code>{...}</code> and parentheses <code>(...)</code> to mark the beginning and end of a code block.</p> <p>For matching braces, use \"[{\" to jump to the previous unmatched open brace and \"]}\" for the next unmatched close brace. The commands \"[(\" and \"])\" work similarly for parentheses.</p> <p>If the cursor is on a curly brace, parenthesis, or square bracket, use \"%\" to jump to its match.</p>"},{"location":"quickstart/","title":"Quickstart","text":"<p>This guide helps you get started using aretext. It assumes you are comfortable using a terminal.</p>"},{"location":"quickstart/#introduction","title":"Introduction","text":"<p>Aretext is a terminal-based editor with vim-compatible key bindings. If you have used vim before, aretext should feel very familiar. If not, this guide will help you get started.</p>"},{"location":"quickstart/#installing-the-editor","title":"Installing the editor","text":"<p>The first step is to install aretext. You can check whether aretext is installed by running:</p> <pre><code>aretext -version\n</code></pre> <p>If you see a version string like \"1.2.3 @ 9955832c3e2036b762e59238fe39f648a3cb1199\" then aretext is installed!</p>"},{"location":"quickstart/#starting-the-editor","title":"Starting the editor","text":"<p>To start the editor, run <code>aretext</code>. This will start a new, empty document called something like \"untitled-1621605673.txt\" (the number is a Unix timestamp).</p> <p>Many users set an alias so they can launch <code>aretext</code> quickly. If you are using bash, you can add this line to your <code>~/.bashrc</code> or <code>~/.bash_profile</code>:</p> <pre><code># alias \"at\" to start aretext\nalias at=\"aretext\"\n</code></pre>"},{"location":"quickstart/#inserting-text","title":"Inserting text","text":"<p>To insert text, first press \"i\" to enter insert mode. You can tell you are in insert mode because the bottom of the screen will display:</p> <pre><code>-- INSERT --\n</code></pre> <p>While in insert mode, every character you type will be inserted in the document.</p> <p>When you are done typing, press the escape key to return to normal mode.</p>"},{"location":"quickstart/#navigating-a-document","title":"Navigating a document","text":"<p>In normal mode you can move the cursor using the \"h\", \"j\", \"k\", and \"l\" keys:</p> <ul> <li>\"h\" moves the cursor left.</li> <li>\"j\" moves the cursor down.</li> <li>\"k\" moves the cursor up.</li> <li>\"l\" moves the cursor right.</li> </ul> <p>If you prefer, you can also use the arrow keys.</p>"},{"location":"quickstart/#saving-and-quitting","title":"Saving and quitting","text":"<p>Return to normal mode by pressing the escape key. Then press \":\" to open the command menu.</p> <p>Type \"s\" to search for the \"save\" command. The first item should be \"save\". Press enter to save the document and return to normal mode.</p> <p>In normal mode, type \":\" to open the command menu again. This time, type \"q\" to search for the \"quit\" command. Press enter to quit the editor.</p> <p>NOTE: if you are familiar with vim's \"ex\" mode commands, you can use these too! For example, \"w\" (write) always matches the save command, and \"wq!\" matches \"force save document and quit\".</p>"},{"location":"quickstart/#next-steps","title":"Next steps","text":"<p>Congratulations! You can now edit a document in aretext!</p> <p>The next sections explain how to use aretext effectively:</p> <ul> <li>Files: How to find, open, and save documents.</li> <li>Navigation: How to navigate within a document.</li> <li>Edit: How to edit a document.</li> <li>Configuration: How to configure settings.</li> <li>Custom Menu Commands: How to extend the editor with custom menu commands.</li> </ul> <p>For a list of common commands, please see the Cheat Sheet.</p>"}]}