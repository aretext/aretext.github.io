{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"User Documentation Welcome to the user documentation for aretext! Aretext is a terminal-based text editor with vim-compatible key bindings. Getting Started Install Quickstart User Guide Files : how to find, open, and save documents. Navigation : how to navigate within a document. Edit : how to edit a document. Configuration : how to configure settings. Custom Menu Commands : how to extend the editor with custom menu commands. Reference Command Reference Configuration Reference Contact GitHub Discussions for questions. GitHub Issues for bug reports and feature requests.","title":"Home"},{"location":"#user-documentation","text":"Welcome to the user documentation for aretext! Aretext is a terminal-based text editor with vim-compatible key bindings.","title":"User Documentation"},{"location":"#getting-started","text":"Install Quickstart","title":"Getting Started"},{"location":"#user-guide","text":"Files : how to find, open, and save documents. Navigation : how to navigate within a document. Edit : how to edit a document. Configuration : how to configure settings. Custom Menu Commands : how to extend the editor with custom menu commands.","title":"User Guide"},{"location":"#reference","text":"Command Reference Configuration Reference","title":"Reference"},{"location":"#contact","text":"GitHub Discussions for questions. GitHub Issues for bug reports and feature requests.","title":"Contact"},{"location":"command-reference/","text":"Command Reference This document lists every command in aretext. All commands are compatible with vim keybindings, but not all vim keybindings are implemented. If you want to use a command that is not yet available, please consider contributing to the project! Normal Mode Commands Some commands may be prefixed with a number count to repeat the command count times. For example \"5x\" deletes the next five characters. Commands that interact with the clipboard accept a clipboard page prefix of the form \"[a-z] , where the letter is the name of the page. If not provided, a default (unnamed) page is used. Name Key Binding Options cursor left left arrow cursor right right arrow cursor up up arrow cursor down down arrow cursor left h cursor right l cursor up k cursor down j cursor back backspace cursor to next matching character in line f{char} count cursor to prev matching character in line F{char} count cursor till next matching character in line t{char} count cursor till prev matching character in line T{char} count cursor next word start w cursor prev word start b cursor next word end e cursor prev paragraph { cursor next paragraph } cursor line start 0 cursor line start after indentation ^ cursor line end $ cursor start of first line gg cursor start of line number {count}gg cursor start of last line G scroll up ctrl-u scroll down ctrl-d insert i insert at start of line I append a append at end of line A new line below o new line above O join lines J delete next character in line x count, clipboard page delete line dd count, clipboard page delete previous character in line dh clipboard page delete lines below dj clipboard page delete lines above dk clipboard page delete next character in line dl count, clipboard page delete to end of line d$ clipboard page delete to start of line d0 clipboard page delete to start of line after indentation d^ clipboard page delete to end of line D clipboard page delete to start of next word dw clipboard page delete a word daw clipboard page delete inner word diw clipboard page delete to next matching character in line df{char} count, clipboard page delete to prev matching character in line dF{char} count, clipboard page delete till next matching character in line dt{char} count, clipboard page delete till prev matching character in line dT{char} count, clipboard page change to start of next word cw clipboard page change a word caw clipboard page change inner word ciw clipboard page change to next matching character in line cf{char} count, clipboard page change to prev matching character in line cF{char} count, clipboard page change till next matching character in line ct{char} count, clipboard page change till prev matching character in line cT{char} count, clipboard page replace character r toggle case ~ indent line >> outdent line \\<\\< yank to start of next word yw clipboard page yank a word yaw clipboard page yank inner word yiw clipboard page yank line yy clipboard page put after cursor p clipboard page put before cursor P clipboard page show command menu : start forward search / start backward search ? find next match n find previous match N undo u redo ctrl-r visual mode charwise v visual mode linewise V repeat last action . Visual Mode Commands Name Key Binding Options toggle visual mode charwise v toggle visual mode linewise V return to normal mode escape show command menu : delete selection x clipboard page delete selection d clipboard page change selection c clipboard page toggle case for selection ~ indent selection > outdent selection \\< yank selection y clipboard page Menu Commands Name Aliases quit q force quit q! save document s, w save document and quit sq, wq force save document s!, w! force save document and quit sq!, wq! force reload r! find and open f open previous document p open next document n toggle show tabs ta toggle tab expand te toggle line numbers nu toggle auto-indent ai start/stop recording macro m replay macro r set syntax plaintext set syntax json set syntax yaml set syntax go set syntax python set syntax rust set syntax c set syntax gitcommit set syntax gitrebase","title":"Commands"},{"location":"command-reference/#command-reference","text":"This document lists every command in aretext. All commands are compatible with vim keybindings, but not all vim keybindings are implemented. If you want to use a command that is not yet available, please consider contributing to the project!","title":"Command Reference"},{"location":"command-reference/#normal-mode-commands","text":"Some commands may be prefixed with a number count to repeat the command count times. For example \"5x\" deletes the next five characters. Commands that interact with the clipboard accept a clipboard page prefix of the form \"[a-z] , where the letter is the name of the page. If not provided, a default (unnamed) page is used. Name Key Binding Options cursor left left arrow cursor right right arrow cursor up up arrow cursor down down arrow cursor left h cursor right l cursor up k cursor down j cursor back backspace cursor to next matching character in line f{char} count cursor to prev matching character in line F{char} count cursor till next matching character in line t{char} count cursor till prev matching character in line T{char} count cursor next word start w cursor prev word start b cursor next word end e cursor prev paragraph { cursor next paragraph } cursor line start 0 cursor line start after indentation ^ cursor line end $ cursor start of first line gg cursor start of line number {count}gg cursor start of last line G scroll up ctrl-u scroll down ctrl-d insert i insert at start of line I append a append at end of line A new line below o new line above O join lines J delete next character in line x count, clipboard page delete line dd count, clipboard page delete previous character in line dh clipboard page delete lines below dj clipboard page delete lines above dk clipboard page delete next character in line dl count, clipboard page delete to end of line d$ clipboard page delete to start of line d0 clipboard page delete to start of line after indentation d^ clipboard page delete to end of line D clipboard page delete to start of next word dw clipboard page delete a word daw clipboard page delete inner word diw clipboard page delete to next matching character in line df{char} count, clipboard page delete to prev matching character in line dF{char} count, clipboard page delete till next matching character in line dt{char} count, clipboard page delete till prev matching character in line dT{char} count, clipboard page change to start of next word cw clipboard page change a word caw clipboard page change inner word ciw clipboard page change to next matching character in line cf{char} count, clipboard page change to prev matching character in line cF{char} count, clipboard page change till next matching character in line ct{char} count, clipboard page change till prev matching character in line cT{char} count, clipboard page replace character r toggle case ~ indent line >> outdent line \\<\\< yank to start of next word yw clipboard page yank a word yaw clipboard page yank inner word yiw clipboard page yank line yy clipboard page put after cursor p clipboard page put before cursor P clipboard page show command menu : start forward search / start backward search ? find next match n find previous match N undo u redo ctrl-r visual mode charwise v visual mode linewise V repeat last action .","title":"Normal Mode Commands"},{"location":"command-reference/#visual-mode-commands","text":"Name Key Binding Options toggle visual mode charwise v toggle visual mode linewise V return to normal mode escape show command menu : delete selection x clipboard page delete selection d clipboard page change selection c clipboard page toggle case for selection ~ indent selection > outdent selection \\< yank selection y clipboard page","title":"Visual Mode Commands"},{"location":"command-reference/#menu-commands","text":"Name Aliases quit q force quit q! save document s, w save document and quit sq, wq force save document s!, w! force save document and quit sq!, wq! force reload r! find and open f open previous document p open next document n toggle show tabs ta toggle tab expand te toggle line numbers nu toggle auto-indent ai start/stop recording macro m replay macro r set syntax plaintext set syntax json set syntax yaml set syntax go set syntax python set syntax rust set syntax c set syntax gitcommit set syntax gitrebase","title":"Menu Commands"},{"location":"config-reference/","text":"Configuration Reference This document lists every configuration option in aretext. Attribute Type Description syntaxLanguage enum Language used for syntax highlighting. Must be a valid syntax language . tabSize integer Maximum number of cells occupied by a tab. Must be greater than zero. tabExpand boolean If true, replace inserted tabs with the equivalent number of spaces. showTabs boolean If true, display tabs in the document. autoIndent boolean If true, indent new lines to match indentation of the previous line. showLineNumbers boolean If true, display line numbers. menuCommands array of objects Additional menu items that can run arbitrary shell commands. See Menu Command Object below for the expected fields. hideDirectories array of strings Glob patterns matching directories to hide from file search. Patterns are matched against the absolute path to the directory. styles dict Styles control how UI elements are displayed. See Styles below for details. Syntax Languages Value Description plaintext Do not apply any syntax highlighting. json JSON yaml YAML go Go python Python rust Rust c C devlog devlog gitcommit Format for editing a git commit gitrebase Format for git interactive rebase Menu Command Object Attribute Type Description name string Displayed name of the menu item. shellCmd string Shell command to execute when the menu item is selected. mode enum Either \"silent\", \"terminal\", \"insert\", or \"fileLocations\". See Custom Menu Commands for more details. save bool If true, attempt to save the document before executing the command. Styles The styles configuration is a dictionary. Each key represents a kind of UI element: lineNum : the line numbers displayed in the left margin of the document. tokenOperator : an operator token recognized by the syntax language. tokenKeyword : a keyword token recognized by the syntax language. tokenNumber : a number token recognized by the syntax language. tokenString : a string token recognized by the syntax language. tokenComment : a comment token recognized by the syntax language. tokenCustom1 through tokenCustom8 : language-specific tokens recognized by the syntax language. The values are objects with a single key color that controls the color of the UI element. The color can be either a W3C color keyword or a hexadecimal RGB code. For example, both red and #ff0000 represent the color red. When using named colors, the terminal emulator may override the displayed color. For example, the solarized dark theme in Alacritty overrides the color red to a specific hex code. If you want to ignore the terminal emulator palette, specify colors using hexadecimal RGB codes instead of named colors.","title":"Configuration"},{"location":"config-reference/#configuration-reference","text":"This document lists every configuration option in aretext. Attribute Type Description syntaxLanguage enum Language used for syntax highlighting. Must be a valid syntax language . tabSize integer Maximum number of cells occupied by a tab. Must be greater than zero. tabExpand boolean If true, replace inserted tabs with the equivalent number of spaces. showTabs boolean If true, display tabs in the document. autoIndent boolean If true, indent new lines to match indentation of the previous line. showLineNumbers boolean If true, display line numbers. menuCommands array of objects Additional menu items that can run arbitrary shell commands. See Menu Command Object below for the expected fields. hideDirectories array of strings Glob patterns matching directories to hide from file search. Patterns are matched against the absolute path to the directory. styles dict Styles control how UI elements are displayed. See Styles below for details.","title":"Configuration Reference"},{"location":"config-reference/#syntax-languages","text":"Value Description plaintext Do not apply any syntax highlighting. json JSON yaml YAML go Go python Python rust Rust c C devlog devlog gitcommit Format for editing a git commit gitrebase Format for git interactive rebase","title":"Syntax Languages"},{"location":"config-reference/#menu-command-object","text":"Attribute Type Description name string Displayed name of the menu item. shellCmd string Shell command to execute when the menu item is selected. mode enum Either \"silent\", \"terminal\", \"insert\", or \"fileLocations\". See Custom Menu Commands for more details. save bool If true, attempt to save the document before executing the command.","title":"Menu Command Object"},{"location":"config-reference/#styles","text":"The styles configuration is a dictionary. Each key represents a kind of UI element: lineNum : the line numbers displayed in the left margin of the document. tokenOperator : an operator token recognized by the syntax language. tokenKeyword : a keyword token recognized by the syntax language. tokenNumber : a number token recognized by the syntax language. tokenString : a string token recognized by the syntax language. tokenComment : a comment token recognized by the syntax language. tokenCustom1 through tokenCustom8 : language-specific tokens recognized by the syntax language. The values are objects with a single key color that controls the color of the UI element. The color can be either a W3C color keyword or a hexadecimal RGB code. For example, both red and #ff0000 represent the color red. When using named colors, the terminal emulator may override the displayed color. For example, the solarized dark theme in Alacritty overrides the color red to a specific hex code. If you want to ignore the terminal emulator palette, specify colors using hexadecimal RGB codes instead of named colors.","title":"Styles"},{"location":"configuration/","text":"Configuration Editing Config Aretext stores its configuration in a single YAML file. You can edit the config file using the -editconfig flag: aretext -editconfig The configuration file is located at $XDG_CONFIG_HOME/aretext/config.yaml , where XDG_CONFIG_HOME is configured according to the XDG Base Directory Specification . On Linux, this defaults to ~/.config , and on macOS it defaults to ~/Library/Application Support . When you open the config file, you should see something like: - name : default pattern : \"**\" config : autoIndent : false hideDirectories : [ \".git\" ] syntaxLanguage : plaintext tabExpand : false tabSize : 4 showLineNumbers : false - name : json pattern : \"**/*.json\" config : autoIndent : true syntaxLanguage : json tabExpand : true tabSize : 2 showLineNumbers : true Each item in the configuration file describes a rule . For example, in the snippet above, the first rule is named \"default\" and the second rule is named \"json\". Each rule has a pattern . The \"**\" is a wildcard that matches any subdirectory, and \"*\" is a wildcard that matches zero or more characters in a file or directory name. When aretext loads a file, it checks each rule in order. If the rule's pattern matches the file's absolute path, it applies the rule to update the configuration. For example, if aretext loaded the file \"foo/bar.json\" using the above configuration, both rules would match the filename. The resulting configuration would be: config : autoIndent : true # from the \"json\" rule hideDirectories : [ \".git\" ] # from the \"default\" rule syntaxLanguage : json # from the \"json\" rule tabExpand : true # from the \"json\" rule tabSize : 2 # from the \"json\" rule showLineNumbers : true # from the \"json\" rule When merging configurations from different rules: For strings and numbers, the values from later rules overwrite the values from previous rules. For lists, the values from all rules are combined. For dictionaries, the keys from later rules are added to the merged dictionary, potentially overwriting keys set by previous rules. This is a powerful mechanism for customizing configuration based on filename extension and/or project location. For example, suppose that one project you work on uses four spaces to indent JSON files. You could add a new rule to your config that overwrites the tabSize for JSON files in that specific project: # ... other rules above ... - name : myproject json pattern : \"**/myproject/**/*.json\" config : tabSize : 4 Troubleshooting Fixing errors on startup If your YAML config file has errors, aretext will exit with an error message. You can force aretext to ignore the config file by passing the \"-noconfig\" flag: aretext -editconfig -noconfig This allows you to start the editor so you can fix the configuration. Checking which rules were applied To see which configuration rules aretext applied when loading a file, start aretext with logging enabled: aretext -log debug.log If you view the file debug.log , you should see lines like this: Applying config rule 'default' with pattern '**' for path 'path/to/file.txt' This tells you which rules aretext applied when opening a file, which can help you debug your configuration. Configuration Reference For a complete list of available configuration options, see Configuration Reference .","title":"Configuration"},{"location":"configuration/#configuration","text":"","title":"Configuration"},{"location":"configuration/#editing-config","text":"Aretext stores its configuration in a single YAML file. You can edit the config file using the -editconfig flag: aretext -editconfig The configuration file is located at $XDG_CONFIG_HOME/aretext/config.yaml , where XDG_CONFIG_HOME is configured according to the XDG Base Directory Specification . On Linux, this defaults to ~/.config , and on macOS it defaults to ~/Library/Application Support . When you open the config file, you should see something like: - name : default pattern : \"**\" config : autoIndent : false hideDirectories : [ \".git\" ] syntaxLanguage : plaintext tabExpand : false tabSize : 4 showLineNumbers : false - name : json pattern : \"**/*.json\" config : autoIndent : true syntaxLanguage : json tabExpand : true tabSize : 2 showLineNumbers : true Each item in the configuration file describes a rule . For example, in the snippet above, the first rule is named \"default\" and the second rule is named \"json\". Each rule has a pattern . The \"**\" is a wildcard that matches any subdirectory, and \"*\" is a wildcard that matches zero or more characters in a file or directory name. When aretext loads a file, it checks each rule in order. If the rule's pattern matches the file's absolute path, it applies the rule to update the configuration. For example, if aretext loaded the file \"foo/bar.json\" using the above configuration, both rules would match the filename. The resulting configuration would be: config : autoIndent : true # from the \"json\" rule hideDirectories : [ \".git\" ] # from the \"default\" rule syntaxLanguage : json # from the \"json\" rule tabExpand : true # from the \"json\" rule tabSize : 2 # from the \"json\" rule showLineNumbers : true # from the \"json\" rule When merging configurations from different rules: For strings and numbers, the values from later rules overwrite the values from previous rules. For lists, the values from all rules are combined. For dictionaries, the keys from later rules are added to the merged dictionary, potentially overwriting keys set by previous rules. This is a powerful mechanism for customizing configuration based on filename extension and/or project location. For example, suppose that one project you work on uses four spaces to indent JSON files. You could add a new rule to your config that overwrites the tabSize for JSON files in that specific project: # ... other rules above ... - name : myproject json pattern : \"**/myproject/**/*.json\" config : tabSize : 4","title":"Editing Config"},{"location":"configuration/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"configuration/#fixing-errors-on-startup","text":"If your YAML config file has errors, aretext will exit with an error message. You can force aretext to ignore the config file by passing the \"-noconfig\" flag: aretext -editconfig -noconfig This allows you to start the editor so you can fix the configuration.","title":"Fixing errors on startup"},{"location":"configuration/#checking-which-rules-were-applied","text":"To see which configuration rules aretext applied when loading a file, start aretext with logging enabled: aretext -log debug.log If you view the file debug.log , you should see lines like this: Applying config rule 'default' with pattern '**' for path 'path/to/file.txt' This tells you which rules aretext applied when opening a file, which can help you debug your configuration.","title":"Checking which rules were applied"},{"location":"configuration/#configuration-reference","text":"For a complete list of available configuration options, see Configuration Reference .","title":"Configuration Reference"},{"location":"custom-menu-commands/","text":"Custom Menu Commands Aretext allows you to define custom menu items to run shell commands. This provides a simple, yet powerful, way to extend the editor. Adding Custom Menu Comands You can add new menu commands by editing the config file to add this rule: - name : custom menu rule pattern : \"**/myproject/**\" config : menuCommands : - name : my custom menu command shellCmd : echo 'hello world!' | less mode : terminal # or \"silent\" or \"insert\" or \"fileLocations\" After restarting the editor, the new command will be available in the command menu. Selecting the new command will launch a shell (configured by the $SHELL environment variable) and execute the shell command (in this case, echoing \"hello world\"). The \"mode\" parameter controls how aretext handles the command's input and output. There are four modes: Mode Input Output Use Cases terminal tty tty make , git commit , go test , man , ... silent none none go fmt , tmux commands, copy to system clipboard, ... insert none insert into document paste from system clipboard, insert snippet, comment/uncomment selection, ... fileLocations none file location menu grep for word under cursor, ... In addition, the following environment variables are provided to the shell command: $FILEPATH is the absolute path to the current file. $WORD is the current word under the cursor. $SELECTION is the currently selected text (if any). Examples Build a project with make Add a menu command to build a project using make . Piping to less allows us to page through the output. - name : custom make cmd pattern : \"**/myproject/**\" config : menuCommands : - name : build shellCmd : make | less save : true # save the file before running `make` Copy and paste using the system clipboard Most systems provide command-line utilities for interacting with the system clipboard. Custom menu commands can invoke these tools to copy the current selection and paste into the document. On Linux (Wayland): - name : linux wayland clipboard commands pattern : \"**\" config : menuCommands : - name : copy to clipboard shellCmd : wl-copy \"$SELECTION\" mode : silent - name : paste from clipboard shellCmd : wl-paste mode : insert On macOS: - name : macos clipboard commands pattern : \"**\" config : menuCommands : - name : copy to clipboard shellCmd : printenv SELECTION | pbcopy mode : silent - name : paste from clipboard shellCmd : pbpaste mode : insert Using tmux: - name : tmux clipboard commands pattern : \"**\" config : menuCommands : - name : copy to clipboard shellCmd : printenv SELECTION | tmux load-buffer - mode : silent - name : paste from clipboard shellCmd : tmux show-buffer mode : insert Format the current file Many programming languages provide command line tools to automatically format code. You can add a custom menu command to run these tools on the current file. For example, this command uses go fmt to format a Go file: - name : custom fmt command pattern : \"**/*.go\" config : menuCommands : - name : go fmt current file shellCmd : go fmt $FILEPATH | less save : true # save the file before running `go fmt` Insert a snippet You can add a custom menu command to insert a snippet of code. For example, suppose you have written a template for a Go test. You can then create a menu command to cat the contents of the file into the document: - name : custom snippet command pattern : \"**/*.go\" config : menuCommands : - name : insert test snippet shellCmd : cat ~/snippets/go-test.go mode : insert Grep for the word under the cursor You can add a custom menu command to grep for the word under the cursor. The following example uses ripgrep to perform the search: - name : custom grep command pattern : \"**\" config : menuCommands : - name : rg word shellCmd : rg $WORD --vimgrep # or `grep $WORD -n -R .` mode : fileLocations Once the search has completed, aretext loads the locations into a searchable menu. This allows you to easily navigate to a particular result. The \"fileLocations\" mode works with any command that outputs file locations as lines with the format: <file>:<line>:<snippet> or <file>:<line>:<col>:<snippet> . You can use grep, ripgrep, or a script you write yourself! Open a document in a new tmux window If you use tmux , you can add a custom menu command to open the current document in a new window. - name : tmux window commands pattern : \"**\" config : menuCommands : - name : split window horizontal shellCmd : tmux split-window -h \"aretext $FILEPATH\" mode : silent - name : split window vertical shellCmd : tmux split-window -v \"aretext $FILEPATH mode : silent","title":"Custom menu commands"},{"location":"custom-menu-commands/#custom-menu-commands","text":"Aretext allows you to define custom menu items to run shell commands. This provides a simple, yet powerful, way to extend the editor.","title":"Custom Menu Commands"},{"location":"custom-menu-commands/#adding-custom-menu-comands","text":"You can add new menu commands by editing the config file to add this rule: - name : custom menu rule pattern : \"**/myproject/**\" config : menuCommands : - name : my custom menu command shellCmd : echo 'hello world!' | less mode : terminal # or \"silent\" or \"insert\" or \"fileLocations\" After restarting the editor, the new command will be available in the command menu. Selecting the new command will launch a shell (configured by the $SHELL environment variable) and execute the shell command (in this case, echoing \"hello world\"). The \"mode\" parameter controls how aretext handles the command's input and output. There are four modes: Mode Input Output Use Cases terminal tty tty make , git commit , go test , man , ... silent none none go fmt , tmux commands, copy to system clipboard, ... insert none insert into document paste from system clipboard, insert snippet, comment/uncomment selection, ... fileLocations none file location menu grep for word under cursor, ... In addition, the following environment variables are provided to the shell command: $FILEPATH is the absolute path to the current file. $WORD is the current word under the cursor. $SELECTION is the currently selected text (if any).","title":"Adding Custom Menu Comands"},{"location":"custom-menu-commands/#examples","text":"","title":"Examples"},{"location":"custom-menu-commands/#build-a-project-with-make","text":"Add a menu command to build a project using make . Piping to less allows us to page through the output. - name : custom make cmd pattern : \"**/myproject/**\" config : menuCommands : - name : build shellCmd : make | less save : true # save the file before running `make`","title":"Build a project with make"},{"location":"custom-menu-commands/#copy-and-paste-using-the-system-clipboard","text":"Most systems provide command-line utilities for interacting with the system clipboard. Custom menu commands can invoke these tools to copy the current selection and paste into the document. On Linux (Wayland): - name : linux wayland clipboard commands pattern : \"**\" config : menuCommands : - name : copy to clipboard shellCmd : wl-copy \"$SELECTION\" mode : silent - name : paste from clipboard shellCmd : wl-paste mode : insert On macOS: - name : macos clipboard commands pattern : \"**\" config : menuCommands : - name : copy to clipboard shellCmd : printenv SELECTION | pbcopy mode : silent - name : paste from clipboard shellCmd : pbpaste mode : insert Using tmux: - name : tmux clipboard commands pattern : \"**\" config : menuCommands : - name : copy to clipboard shellCmd : printenv SELECTION | tmux load-buffer - mode : silent - name : paste from clipboard shellCmd : tmux show-buffer mode : insert","title":"Copy and paste using the system clipboard"},{"location":"custom-menu-commands/#format-the-current-file","text":"Many programming languages provide command line tools to automatically format code. You can add a custom menu command to run these tools on the current file. For example, this command uses go fmt to format a Go file: - name : custom fmt command pattern : \"**/*.go\" config : menuCommands : - name : go fmt current file shellCmd : go fmt $FILEPATH | less save : true # save the file before running `go fmt`","title":"Format the current file"},{"location":"custom-menu-commands/#insert-a-snippet","text":"You can add a custom menu command to insert a snippet of code. For example, suppose you have written a template for a Go test. You can then create a menu command to cat the contents of the file into the document: - name : custom snippet command pattern : \"**/*.go\" config : menuCommands : - name : insert test snippet shellCmd : cat ~/snippets/go-test.go mode : insert","title":"Insert a snippet"},{"location":"custom-menu-commands/#grep-for-the-word-under-the-cursor","text":"You can add a custom menu command to grep for the word under the cursor. The following example uses ripgrep to perform the search: - name : custom grep command pattern : \"**\" config : menuCommands : - name : rg word shellCmd : rg $WORD --vimgrep # or `grep $WORD -n -R .` mode : fileLocations Once the search has completed, aretext loads the locations into a searchable menu. This allows you to easily navigate to a particular result. The \"fileLocations\" mode works with any command that outputs file locations as lines with the format: <file>:<line>:<snippet> or <file>:<line>:<col>:<snippet> . You can use grep, ripgrep, or a script you write yourself!","title":"Grep for the word under the cursor"},{"location":"custom-menu-commands/#open-a-document-in-a-new-tmux-window","text":"If you use tmux , you can add a custom menu command to open the current document in a new window. - name : tmux window commands pattern : \"**\" config : menuCommands : - name : split window horizontal shellCmd : tmux split-window -h \"aretext $FILEPATH\" mode : silent - name : split window vertical shellCmd : tmux split-window -v \"aretext $FILEPATH mode : silent","title":"Open a document in a new tmux window"},{"location":"edit/","text":"Edit This guide describes commands you can use to edit a document efficiently using vim key bindings. It assumes you are familiar with the commands described in the Quickstart . Insert and append In normal mode, type \"i\" to enter insert mode at the current cursor position. To insert at the position after the cursor, type \"a\" (short for \"append\") instead. To insert at the start of the line, type \"I\". To append after the end of the line, type \"A\". From insert mode, you can return to normal mode by pressing the escape key. Delete To delete a single character in normal mode, type \"x\". (In insert mode, you can use the backspace key instead.) To delete a line, type \"dd\" in normal mode. To delete from the cursor to the end of the line, type \"D\". There are many delete commands of the form \"d \", where is one of the cursor movement commands described in Navigation : \"d$\" deletes from the cursor to the end of the line, because \"$\" means \"move the cursor to the end of the line\". \"diw\" (which means \"delete inner word\") deletes the current word under the cursor. \"daw\" (which means \"delete a word\") deletes the current word under the cursor and any trailing whitespace. \"dh\" deletes one character to the left, and \"dl\" deletes one character to the right. \"dj\" deletes the current and previous lines, and \"dk\" deletes the current and next line. \"dt{char}\" deletes up to, but not including, the next matching character on the current line. Replace To replace the character under the cursor, type \"r\" in normal mode, then type the new character. Change In aretext, \"change\" means to delete some text then enter insert mode. This is useful for quickly changing a word or line. To change the current word under the cursor in normal mode, type \"ciw\" (\"change inner word\"). To change the current word under the cursor and trailing whitespace in normal mode, type \"caw\" (\"change a word\"). Put and yank When you delete text, aretext copies it to a hidden buffer. You can then insert the deleted text after the cursor by typing \"p\" (short for \"put\") in normal mode. Alternatively, you can type \"P\" to insert the text before the cursor. You can copy a line into the buffer by typing \"yy\" (short for \"yank\") in normal mode. If you want to copy/paste using your system's clipboard, you will need to add custom menu commands (see Custom Menu Commands for instructions). Inserting and joining lines To start a new line below the cursor and enter insert mode, type \"o\". To start a new line above the cursor and enter insert mode, type \"O\". To join the current line with the line below, type \"J\". Indenting and outdenting To indent the current line, type \">>\". To outdent the current line, type \"\\<<\". Toggle case To change the character under the cursor from uppercase to lowercase, or vice versa, type \"~\". Selection (visual mode) To start a selection, type \"v\" (short for \"visual mode\"). You can use the same cursor motions as in normal mode to move the end of the selection. To select entire lines (instead of individual characters), type \"V\". You can use the following commands to modify the selected text: \"x\" and \"d\" both delete the selection. \"c\" (short for \"change\") deletes the selection and enters insert mode. \"~\" toggles the case of the selection. \">\" indents the selection. \"<\" outdents the selection. \"y\" (short for \"yank\") copies the selection. To clear the selection and return to normal mode, press the escape key. Undo and redo To undo the last edit, type \"u\" (short for \"undo\") in normal mode. To redo the last edit, press Ctrl-r (short for \"redo\") in normal mode. Aretext clears the undo history whenever a document is loaded or reloaded. Repeat last action To repeat the last action, type \".\" in normal mode. This is useful for avoiding repetitive typing. Record and replay a macro To repeat a sequence of commands, you can record a macro. In normal mode, type \":\" to open the command menu. Search for and select \"start/stop recording macro\" to begin recording a macro. Edit the document. Any changes you make will be recorded in the macro. In the command menu, select \"start/stop recording macro\" again to stop recording the macro. To replay the recorded macro, select \"replay macro\" in the command menu. Once you have replayed a macro, you can repeat it using the \".\" (repeat last action) command in normal mode.","title":"Edit"},{"location":"edit/#edit","text":"This guide describes commands you can use to edit a document efficiently using vim key bindings. It assumes you are familiar with the commands described in the Quickstart .","title":"Edit"},{"location":"edit/#insert-and-append","text":"In normal mode, type \"i\" to enter insert mode at the current cursor position. To insert at the position after the cursor, type \"a\" (short for \"append\") instead. To insert at the start of the line, type \"I\". To append after the end of the line, type \"A\". From insert mode, you can return to normal mode by pressing the escape key.","title":"Insert and append"},{"location":"edit/#delete","text":"To delete a single character in normal mode, type \"x\". (In insert mode, you can use the backspace key instead.) To delete a line, type \"dd\" in normal mode. To delete from the cursor to the end of the line, type \"D\". There are many delete commands of the form \"d \", where is one of the cursor movement commands described in Navigation : \"d$\" deletes from the cursor to the end of the line, because \"$\" means \"move the cursor to the end of the line\". \"diw\" (which means \"delete inner word\") deletes the current word under the cursor. \"daw\" (which means \"delete a word\") deletes the current word under the cursor and any trailing whitespace. \"dh\" deletes one character to the left, and \"dl\" deletes one character to the right. \"dj\" deletes the current and previous lines, and \"dk\" deletes the current and next line. \"dt{char}\" deletes up to, but not including, the next matching character on the current line.","title":"Delete"},{"location":"edit/#replace","text":"To replace the character under the cursor, type \"r\" in normal mode, then type the new character.","title":"Replace"},{"location":"edit/#change","text":"In aretext, \"change\" means to delete some text then enter insert mode. This is useful for quickly changing a word or line. To change the current word under the cursor in normal mode, type \"ciw\" (\"change inner word\"). To change the current word under the cursor and trailing whitespace in normal mode, type \"caw\" (\"change a word\").","title":"Change"},{"location":"edit/#put-and-yank","text":"When you delete text, aretext copies it to a hidden buffer. You can then insert the deleted text after the cursor by typing \"p\" (short for \"put\") in normal mode. Alternatively, you can type \"P\" to insert the text before the cursor. You can copy a line into the buffer by typing \"yy\" (short for \"yank\") in normal mode. If you want to copy/paste using your system's clipboard, you will need to add custom menu commands (see Custom Menu Commands for instructions).","title":"Put and yank"},{"location":"edit/#inserting-and-joining-lines","text":"To start a new line below the cursor and enter insert mode, type \"o\". To start a new line above the cursor and enter insert mode, type \"O\". To join the current line with the line below, type \"J\".","title":"Inserting and joining lines"},{"location":"edit/#indenting-and-outdenting","text":"To indent the current line, type \">>\". To outdent the current line, type \"\\<<\".","title":"Indenting and outdenting"},{"location":"edit/#toggle-case","text":"To change the character under the cursor from uppercase to lowercase, or vice versa, type \"~\".","title":"Toggle case"},{"location":"edit/#selection-visual-mode","text":"To start a selection, type \"v\" (short for \"visual mode\"). You can use the same cursor motions as in normal mode to move the end of the selection. To select entire lines (instead of individual characters), type \"V\". You can use the following commands to modify the selected text: \"x\" and \"d\" both delete the selection. \"c\" (short for \"change\") deletes the selection and enters insert mode. \"~\" toggles the case of the selection. \">\" indents the selection. \"<\" outdents the selection. \"y\" (short for \"yank\") copies the selection. To clear the selection and return to normal mode, press the escape key.","title":"Selection (visual mode)"},{"location":"edit/#undo-and-redo","text":"To undo the last edit, type \"u\" (short for \"undo\") in normal mode. To redo the last edit, press Ctrl-r (short for \"redo\") in normal mode. Aretext clears the undo history whenever a document is loaded or reloaded.","title":"Undo and redo"},{"location":"edit/#repeat-last-action","text":"To repeat the last action, type \".\" in normal mode. This is useful for avoiding repetitive typing.","title":"Repeat last action"},{"location":"edit/#record-and-replay-a-macro","text":"To repeat a sequence of commands, you can record a macro. In normal mode, type \":\" to open the command menu. Search for and select \"start/stop recording macro\" to begin recording a macro. Edit the document. Any changes you make will be recorded in the macro. In the command menu, select \"start/stop recording macro\" again to stop recording the macro. To replay the recorded macro, select \"replay macro\" in the command menu. Once you have replayed a macro, you can repeat it using the \".\" (repeat last action) command in normal mode.","title":"Record and replay a macro"},{"location":"files/","text":"Files Aretext is designed to integrate seamlessly with a terminal-based workflow. This strongly influences aretext's approach to managing files: It delegates window management to your terminal multiplexer or emulator. Each instance of aretext opens a single document at a time; to edit multiple documents simultaneously, you can use tmux to run multiple instances of aretext in the same terminal. It provides no commands within the editor to move, rename, create files, or change the working directory. You can use your shell (outside the editor) for these functions. It automatically reloads files that change on disk (unless there are unsaved changes). For example, if you run a code formatting tool that changes a file, aretext will automatically reload it. Aretext currently supports only UTF-8 encoded documents. Fuzzy file search Aretext has built-in fuzzy search for files. This allows you to quickly find and open a file without leaving the editor: In normal mode, type \":\" to open the command menu. In the menu search bar, type \"f\" to select the \"find and open\" command, then press enter. (If there are unsaved changes in the current document, you will need to either save them first or force-reload to discard the changes.) Type in the search bar to filter the file paths. Use arrow keys or tab to choose a file path to open. Press enter to open the selected file. Aretext always searches within the current working directory. Opening a file from the command line To have aretext open a document immediately, pass the path as a positional argument like this: aretext path/to/file . If you do not provide a path argument, aretext will start an empty document called something like \"untitled-1621625423.txt\" (the number is a Unix timestamp). You can either insert text and save this document (useful for writing quick notes) or use fuzzy file search to open another document. Previous and next document Aretext remembers which documents you have opened in the editor. To return to the previous document: In normal mode, type \":\" to open the command menu. In the menu search bar, type \"p\" then select \"open previous document\". Once you have opened a previous document, you can return to next document using the \"open next document\" menu command. Unsaved changes Aretext will warn you if a command would discard unsaved changes or overwrite changes made by another program to the file on disk. You must then decide to either force-save, force-reload, or force-quit. To force-save, select the \"force save document\" menu command. This will overwrite the changes on disk. To force-reload, select the \"force reload\" menu command. This will discard unsaved changes and reload the document from disk. To force-quit, select the \"force quit\" menu command. This will discard unsaved changes and exit the program. Using grep to search files To search for a term in multiple files, you can create a custom menu command that calls grep . See Custom Menu Commands for instructions.","title":"Files"},{"location":"files/#files","text":"Aretext is designed to integrate seamlessly with a terminal-based workflow. This strongly influences aretext's approach to managing files: It delegates window management to your terminal multiplexer or emulator. Each instance of aretext opens a single document at a time; to edit multiple documents simultaneously, you can use tmux to run multiple instances of aretext in the same terminal. It provides no commands within the editor to move, rename, create files, or change the working directory. You can use your shell (outside the editor) for these functions. It automatically reloads files that change on disk (unless there are unsaved changes). For example, if you run a code formatting tool that changes a file, aretext will automatically reload it. Aretext currently supports only UTF-8 encoded documents.","title":"Files"},{"location":"files/#fuzzy-file-search","text":"Aretext has built-in fuzzy search for files. This allows you to quickly find and open a file without leaving the editor: In normal mode, type \":\" to open the command menu. In the menu search bar, type \"f\" to select the \"find and open\" command, then press enter. (If there are unsaved changes in the current document, you will need to either save them first or force-reload to discard the changes.) Type in the search bar to filter the file paths. Use arrow keys or tab to choose a file path to open. Press enter to open the selected file. Aretext always searches within the current working directory.","title":"Fuzzy file search"},{"location":"files/#opening-a-file-from-the-command-line","text":"To have aretext open a document immediately, pass the path as a positional argument like this: aretext path/to/file . If you do not provide a path argument, aretext will start an empty document called something like \"untitled-1621625423.txt\" (the number is a Unix timestamp). You can either insert text and save this document (useful for writing quick notes) or use fuzzy file search to open another document.","title":"Opening a file from the command line"},{"location":"files/#previous-and-next-document","text":"Aretext remembers which documents you have opened in the editor. To return to the previous document: In normal mode, type \":\" to open the command menu. In the menu search bar, type \"p\" then select \"open previous document\". Once you have opened a previous document, you can return to next document using the \"open next document\" menu command.","title":"Previous and next document"},{"location":"files/#unsaved-changes","text":"Aretext will warn you if a command would discard unsaved changes or overwrite changes made by another program to the file on disk. You must then decide to either force-save, force-reload, or force-quit. To force-save, select the \"force save document\" menu command. This will overwrite the changes on disk. To force-reload, select the \"force reload\" menu command. This will discard unsaved changes and reload the document from disk. To force-quit, select the \"force quit\" menu command. This will discard unsaved changes and exit the program.","title":"Unsaved changes"},{"location":"files/#using-grep-to-search-files","text":"To search for a term in multiple files, you can create a custom menu command that calls grep . See Custom Menu Commands for instructions.","title":"Using grep to search files"},{"location":"install/","text":"Install Supported Platforms Platform Status Linux Fully supported macOS Fully supported Windows Supported on WSL only *BSD Will probably work Official Binaries You can download the official binaries for Linux and macOS from the aretext releases page . Linux x86 64-bit VERSION=0.4.0 RELEASE=aretext_${VERSION}_linux_amd64 curl -LO https://github.com/aretext/aretext/releases/download/v$VERSION/$RELEASE.tar.gz tar -zxvf $RELEASE.tar.gz sudo cp $RELEASE/aretext /usr/local/bin/ Linux ARM 64-bit VERSION=0.4.0 RELEASE=aretext_${VERSION}_linux_arm64 curl -LO https://github.com/aretext/aretext/releases/download/v$VERSION/$RELEASE.tar.gz tar -zxvf $RELEASE.tar.gz sudo cp $RELEASE/aretext /usr/local/bin/ macOS x86 64-bit VERSION=0.4.0 RELEASE=aretext_${VERSION}_darwin_amd64 curl -LO https://github.com/aretext/aretext/releases/download/v$VERSION/$RELEASE.tar.gz tar -zxvf $RELEASE.tar.gz sudo cp $RELEASE/aretext /usr/local/bin/ macOS ARM 64-bit VERSION=0.4.0 RELEASE=aretext_${VERSION}_darwin_arm64 curl -LO https://github.com/aretext/aretext/releases/download/v$VERSION/$RELEASE.tar.gz tar -zxvf $RELEASE.tar.gz sudo cp $RELEASE/aretext /usr/local/bin/ Build From Source If you have installed go , then you can build aretext from source: git clone https://github.com/aretext/aretext.git cd aretext make install This will install aretext in $HOME/go/bin , which you can add to your $PATH : export PATH=$PATH:$HOME/go/bin Packages If a package is not yet available for your platform, please consider creating one! We are looking for package maintainers on Debian, Fedora, Homebrew, Nix, and any other platform you may prefer! Arch Linux aretext is available as an AUR Package . If you use yay , run this to install it: yay -S aretext","title":"Install"},{"location":"install/#install","text":"","title":"Install"},{"location":"install/#supported-platforms","text":"Platform Status Linux Fully supported macOS Fully supported Windows Supported on WSL only *BSD Will probably work","title":"Supported Platforms"},{"location":"install/#official-binaries","text":"You can download the official binaries for Linux and macOS from the aretext releases page .","title":"Official Binaries"},{"location":"install/#linux-x86-64-bit","text":"VERSION=0.4.0 RELEASE=aretext_${VERSION}_linux_amd64 curl -LO https://github.com/aretext/aretext/releases/download/v$VERSION/$RELEASE.tar.gz tar -zxvf $RELEASE.tar.gz sudo cp $RELEASE/aretext /usr/local/bin/","title":"Linux x86 64-bit"},{"location":"install/#linux-arm-64-bit","text":"VERSION=0.4.0 RELEASE=aretext_${VERSION}_linux_arm64 curl -LO https://github.com/aretext/aretext/releases/download/v$VERSION/$RELEASE.tar.gz tar -zxvf $RELEASE.tar.gz sudo cp $RELEASE/aretext /usr/local/bin/","title":"Linux ARM 64-bit"},{"location":"install/#macos-x86-64-bit","text":"VERSION=0.4.0 RELEASE=aretext_${VERSION}_darwin_amd64 curl -LO https://github.com/aretext/aretext/releases/download/v$VERSION/$RELEASE.tar.gz tar -zxvf $RELEASE.tar.gz sudo cp $RELEASE/aretext /usr/local/bin/","title":"macOS x86 64-bit"},{"location":"install/#macos-arm-64-bit","text":"VERSION=0.4.0 RELEASE=aretext_${VERSION}_darwin_arm64 curl -LO https://github.com/aretext/aretext/releases/download/v$VERSION/$RELEASE.tar.gz tar -zxvf $RELEASE.tar.gz sudo cp $RELEASE/aretext /usr/local/bin/","title":"macOS ARM 64-bit"},{"location":"install/#build-from-source","text":"If you have installed go , then you can build aretext from source: git clone https://github.com/aretext/aretext.git cd aretext make install This will install aretext in $HOME/go/bin , which you can add to your $PATH : export PATH=$PATH:$HOME/go/bin","title":"Build From Source"},{"location":"install/#packages","text":"If a package is not yet available for your platform, please consider creating one! We are looking for package maintainers on Debian, Fedora, Homebrew, Nix, and any other platform you may prefer!","title":"Packages"},{"location":"install/#arch-linux","text":"aretext is available as an AUR Package . If you use yay , run this to install it: yay -S aretext","title":"Arch Linux"},{"location":"navigation/","text":"Navigation This guide explains how to navigate efficiently within a document. It assumes you know how to start the editor and switch between normal/insert mode (if not, please read the Quickstart first). Scrolling To scroll up by half a screen, press Ctrl-u (\"up\") in normal mode. To scroll down by half a screen, press Ctrl-d (\"down\") in normal mode. Line movement To move the cursor to the last line, type \"G\" in normal mode. To move the cursor to the first line, type \"gg\" in normal mode. To move the cursor to a specific line number, type \" gg\" in normal mode. For example, \"123gg\" moves the cursor to the start of line 123. To move the cursor to the start of the current line (after any indentation), use \"^\". Use \"0\" to move to the start of the current line before any indentation. To move the cursor to the end of the current line, type \"$\" in normal mode. Next or previous matching character To move the cursor forward to the next matching character on a line, type \"f{char}\" in normal mode, where \"{char}\" is the character to match. To move the cursor up to, but not on, that character use \"t{char}\". Similarly, to move the cursor backwards to a matching char, use \"F{char}\" and \"T{char}\". Word movement A \"word\" in aretext is a sequence of characters separated by whitespace or punctuation. To move the cursor forward to the next word, press \"w\" in normal mode. Use \"e\" to move the cursor to the end of the current word, and \"b\" to move the cursor back to the start of the previous word. Paragraph movement A \"paragraph\" in aretext is a contiguous sequence of non-empty lines. To move the cursor to the next paragraph, type \"}\" in normal mode; to move to the previous paragraph, type \"{\". Text search Aretext supports case-sensitive forward and backward search within a document. (It does not currently support case-insensitive or regular expression searches, but these features may be added in the future.) To search forward, type \"/\" in normal mode, then type your search query. To move the cursor to the search result, press enter; to abort the search, press escape. To search backward, type \"?\" in normal mode, then type your search query. To repeat a search, type \"n\" in normal mode (this moves the cursor to the \"next\" result). To move the cursor back to the previous result, type \"N\" in normal mode.","title":"Navigation"},{"location":"navigation/#navigation","text":"This guide explains how to navigate efficiently within a document. It assumes you know how to start the editor and switch between normal/insert mode (if not, please read the Quickstart first).","title":"Navigation"},{"location":"navigation/#scrolling","text":"To scroll up by half a screen, press Ctrl-u (\"up\") in normal mode. To scroll down by half a screen, press Ctrl-d (\"down\") in normal mode.","title":"Scrolling"},{"location":"navigation/#line-movement","text":"To move the cursor to the last line, type \"G\" in normal mode. To move the cursor to the first line, type \"gg\" in normal mode. To move the cursor to a specific line number, type \" gg\" in normal mode. For example, \"123gg\" moves the cursor to the start of line 123. To move the cursor to the start of the current line (after any indentation), use \"^\". Use \"0\" to move to the start of the current line before any indentation. To move the cursor to the end of the current line, type \"$\" in normal mode.","title":"Line movement"},{"location":"navigation/#next-or-previous-matching-character","text":"To move the cursor forward to the next matching character on a line, type \"f{char}\" in normal mode, where \"{char}\" is the character to match. To move the cursor up to, but not on, that character use \"t{char}\". Similarly, to move the cursor backwards to a matching char, use \"F{char}\" and \"T{char}\".","title":"Next or previous matching character"},{"location":"navigation/#word-movement","text":"A \"word\" in aretext is a sequence of characters separated by whitespace or punctuation. To move the cursor forward to the next word, press \"w\" in normal mode. Use \"e\" to move the cursor to the end of the current word, and \"b\" to move the cursor back to the start of the previous word.","title":"Word movement"},{"location":"navigation/#paragraph-movement","text":"A \"paragraph\" in aretext is a contiguous sequence of non-empty lines. To move the cursor to the next paragraph, type \"}\" in normal mode; to move to the previous paragraph, type \"{\".","title":"Paragraph movement"},{"location":"navigation/#text-search","text":"Aretext supports case-sensitive forward and backward search within a document. (It does not currently support case-insensitive or regular expression searches, but these features may be added in the future.) To search forward, type \"/\" in normal mode, then type your search query. To move the cursor to the search result, press enter; to abort the search, press escape. To search backward, type \"?\" in normal mode, then type your search query. To repeat a search, type \"n\" in normal mode (this moves the cursor to the \"next\" result). To move the cursor back to the previous result, type \"N\" in normal mode.","title":"Text search"},{"location":"quickstart/","text":"Quickstart This guide helps you get started using aretext. It assumes you are comfortable using a terminal. Introduction Aretext is a terminal-based editor with vim-compatible key bindings. If you have used vim before, aretext should feel very familiar. If not, this guide will help you get started. Installing the editor The first step is to install aretext . You can check whether aretext is installed by running: aretext -version If you see a version string like \"1.2.3 @ 9955832c3e2036b762e59238fe39f648a3cb1199\" then aretext is installed! Starting the editor To start the editor, run aretext . This will start a new, empty document called something like \"untitled-1621605673.txt\" (the number is a Unix timestamp). Inserting text To insert text, first press \"i\" to enter insert mode. You can tell you are in insert mode because the bottom of the screen will display: -- INSERT -- While in insert mode, every character you type will be inserted in the document. When you are done typing, press the escape key to return to normal mode. Navigating a document In normal mode you can move the cursor using the \"h\", \"j\", \"k\", and \"l\" keys: \"h\" moves the cursor left. \"j\" moves the cursor down. \"k\" moves the cursor up. \"l\" moves the cursor right. If you prefer, you can also use the arrow keys. Saving and quitting Return to normal mode by pressing the escape key. Then press \":\" to open the command menu. Type \"s\" to search for the \"save\" command. The first item should be \"save\". Press enter to save the document and return to normal mode. In normal mode, type \":\" to open the command menu again. This time, type \"q\" to search for the \"quit\" command. Press enter to quit the editor. NOTE: if you are familiar with vim's \"ex\" mode commands, you can use these too! For example, \"w\" (write) always matches the save command, and \"wq!\" matches \"force save document and quit\". Next steps Congratulations! You can now edit a document in aretext! The next sections explain how to use aretext effectively: Files : How to find, open, and save documents. Navigation : How to navigate within a document. Edit : How to edit a document. Configuration : How to configure settings. Custom Menu Commands : How to extend the editor with custom menu commands. For an overview of all available commands, please see the Command Reference .","title":"Quickstart"},{"location":"quickstart/#quickstart","text":"This guide helps you get started using aretext. It assumes you are comfortable using a terminal.","title":"Quickstart"},{"location":"quickstart/#introduction","text":"Aretext is a terminal-based editor with vim-compatible key bindings. If you have used vim before, aretext should feel very familiar. If not, this guide will help you get started.","title":"Introduction"},{"location":"quickstart/#installing-the-editor","text":"The first step is to install aretext . You can check whether aretext is installed by running: aretext -version If you see a version string like \"1.2.3 @ 9955832c3e2036b762e59238fe39f648a3cb1199\" then aretext is installed!","title":"Installing the editor"},{"location":"quickstart/#starting-the-editor","text":"To start the editor, run aretext . This will start a new, empty document called something like \"untitled-1621605673.txt\" (the number is a Unix timestamp).","title":"Starting the editor"},{"location":"quickstart/#inserting-text","text":"To insert text, first press \"i\" to enter insert mode. You can tell you are in insert mode because the bottom of the screen will display: -- INSERT -- While in insert mode, every character you type will be inserted in the document. When you are done typing, press the escape key to return to normal mode.","title":"Inserting text"},{"location":"quickstart/#navigating-a-document","text":"In normal mode you can move the cursor using the \"h\", \"j\", \"k\", and \"l\" keys: \"h\" moves the cursor left. \"j\" moves the cursor down. \"k\" moves the cursor up. \"l\" moves the cursor right. If you prefer, you can also use the arrow keys.","title":"Navigating a document"},{"location":"quickstart/#saving-and-quitting","text":"Return to normal mode by pressing the escape key. Then press \":\" to open the command menu. Type \"s\" to search for the \"save\" command. The first item should be \"save\". Press enter to save the document and return to normal mode. In normal mode, type \":\" to open the command menu again. This time, type \"q\" to search for the \"quit\" command. Press enter to quit the editor. NOTE: if you are familiar with vim's \"ex\" mode commands, you can use these too! For example, \"w\" (write) always matches the save command, and \"wq!\" matches \"force save document and quit\".","title":"Saving and quitting"},{"location":"quickstart/#next-steps","text":"Congratulations! You can now edit a document in aretext! The next sections explain how to use aretext effectively: Files : How to find, open, and save documents. Navigation : How to navigate within a document. Edit : How to edit a document. Configuration : How to configure settings. Custom Menu Commands : How to extend the editor with custom menu commands. For an overview of all available commands, please see the Command Reference .","title":"Next steps"}]}